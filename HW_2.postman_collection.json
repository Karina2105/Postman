{
	"info": {
		"_postman_id": "dd08813b-f7ee-49f6-941c-ee24cfb8cfec",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21504192"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"//  Парсинг - преобразование в данном случае. Нужно забрать данные отправленные в реквесте и преобразовать их в формат json. так как они могут идти строкой, а к элементам строки нельзя обращаться как к объекту\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let name = jsonData.name;\r",
							"let age = jsonData.age;\r",
							"let salary = jsonData.salary;\r",
							"let family = jsonData.family;\r",
							"let salary_x4 = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response is equal to name in request \", function () {\r",
							"    pm.expect(name).to.eql(\"Alex, Kate\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response is equal to age in request \", function () {\r",
							"    pm.expect(age).to.eql(\"24, 12\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary in response is equal to salary in request \", function () {\r",
							"    pm.expect(salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"let reqName = req.name;\r",
							"let reqAge = req.age;\r",
							"let reqSalary = req.salary;\r",
							"let reqSalary_1_5 = req.salary * 4;\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct name in response\", function () {\r",
							"    pm.expect(reqName).to.eql(name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Corect age in request \", function () {\r",
							"    pm.expect(reqAge).to.eql(age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct salary in request \", function () {\r",
							"    pm.expect(reqSalary).to.eql(\"3000\");\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"family in response is \", family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary in response is equal to salary in request \", function () {\r",
							"    pm.expect(reqSalary_1_5).to.eql(salary_x4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex, Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24, 12",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_age = jsonData.age;\r",
							"let resp_family = jsonData.family;\r",
							"let resp_name = jsonData.name;\r",
							"let resp_dog = jsonData.family.pets.dog;\r",
							"let name_of_dog = jsonData.family.pets.dog.name;\r",
							"let age_of_dog = jsonData.family.pets.dog.age;\r",
							"let resp_salary = String(jsonData.salary);\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let reqAge = req.age;\r",
							"let reqName = req.name;\r",
							"let reqSalary = req.salary;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response is equal to name in request \", function () {\r",
							"    pm.expect(reqName).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response is equal to age in request\", function () {\r",
							"    pm.expect(reqAge).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in response is equal to salary in request \", function () {\r",
							"    pm.expect(reqSalary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"family in response is \", resp_family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Key dog contains key name\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(name_of_dog);\r",
							"});\r",
							"// С помощью метода JSON.stringify мы преобразовали объект в строку\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Key dog contains key age\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(age_of_dog);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Key name contains value Luky\",\r",
							"    function () {\r",
							"    pm.expect(name_of_dog).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Key age contains value 4\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(age_of_dog)).to.include(\"4\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Petr&age=25&salary=350",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Petr"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "350"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_age = String(jsonData.age);\r",
							"let resp_name = jsonData.name;\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_age = req.age;\r",
							"let req_name = req.name;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response is equal to name in request \", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age in response is equal to age in request\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary is \", req_salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary is \", resp_salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"This is 1 item\", resp_salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"This is 1 item\", resp_salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"This is 1 item\", resp_salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"First element of salary in response is equal to salary in request\", function () {\r",
							"    pm.expect(String(resp_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Second element of salary in response is equal to salary in request * 2\", function () {\r",
							"    pm.expect(Number(resp_salary[1])).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Third element of salary in response is equal to salary in request * 3\", function () {\r",
							"    pm.expect(Number(resp_salary[2])).to.eql(req_salary * 3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < 3; i++) {\r",
							"    console.log(resp_salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Karina&age=25&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Karina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_person = jsonData.person;\r",
							"let resp_1_5_year = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"let resp_12_month = jsonData.qa_salary_after_12_months;\r",
							"let resp_3_5_year = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"let resp_6_months = jsonData.qa_salary_after_6_months;\r",
							"let resp_start_salary = jsonData.start_qa_salary;\r",
							"let resp_u_age = jsonData.person.u_age;\r",
							"let resp_u_name = jsonData.person.u_name;\r",
							"let resp_u_5_years = jsonData.person.u_salary_5_years;\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"let req_salary = req.salary;\r",
							"let req_age = req.age;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Json response has key - start_qa_salary\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(resp_start_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json response has key - qa_salary_after_6_months\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(resp_6_months);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json response has key - qa_salary_after_12_months\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(resp_12_month);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json response has key - qa_salary_after_1.5_year\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(resp_1_5_year);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json response has key - qa_salary_after_3.5_years\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(resp_3_5_year);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json response has key - person\",\r",
							"    function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(JSON.stringify(resp_person));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Value start_qa_salary in response is equal to value start_qa_salary in request \", function () {\r",
							"    pm.expect(req_salary).to.eql(JSON.stringify(resp_start_salary));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Value qa_salary_after_6_months in response is equal to value salary*2 in request \", function () {\r",
							"    pm.expect(Number(req_salary * 2)).to.eql(resp_6_months);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Value qa_salary_after_12_months in response is equal to value salary*2.7 in request \", function () {\r",
							"    pm.expect(Number(req_salary * 2.7)).to.eql(resp_12_month);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Value qa_salary_after_1.5_year in response is equal to value salary*3.3 in request \", function () {\r",
							"    pm.expect(Number(req_salary * 3.3)).to.eql(resp_1_5_year);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Value qa_salary_after_3.5_year in response is equal to value salary*3.8 in request \", function () {\r",
							"    pm.expect(Number(req_salary * 3.8)).to.eql(resp_3_5_year);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Second element of person in response is equal to salary in request\", function () {\r",
							"    pm.expect(String(resp_u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Value u_age in response is equal to age in request\", function () {\r",
							"    pm.expect(String(resp_u_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Value u_salary_5_years in response is equal to salary*4.2 in request\", function () {\r",
							"    pm.expect(resp_u_5_years).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person = {\r",
							"    \"u_age\": 25,\r",
							"    \"u_name\": [\r",
							"        \"Karina\",\r",
							"        2500,\r",
							"        25\r",
							"    ],\r",
							"    \"u_salary_5_years\": 10500\r",
							"};\r",
							"\r",
							"for (i=0; i<3; i++) {\r",
							"    console.log(Object.entries(person)[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}